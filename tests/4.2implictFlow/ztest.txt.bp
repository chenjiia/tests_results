
bool<9> and(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
return left8&right8,left7&right7,left6&right6,left5&right5,left4&right4,left3&right3,left2&right2,left1&right1,left0&right0;
end

bool<9> or(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
return left8|right8,left7|right7,left6|right6,left5|right5,left4|right4,left3|right3,left2|right2,left1|right1,left0|right0;
end

bool<9> oneComplement(x8,x7,x6,x5,x4,x3,x2,x1,x0)
begin
return 0,~x7,~x6,~x5,~x4,~x3,~x2,~x1,~x0;
end

bool<9> xor(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
return left8^right8,left7^right7,left6^right6,left5^right5,left4^right4,left3^right3,left2^right2,left1^right1,left0^right0;
end

bool<9> rShiftOne(x8,x7,x6,x5,x4,x3,x2,x1,x0)
begin
return 0,x8,x7,x6,x5,x4,x3,x2,x1;
end

bool<9> lShiftOne(x8,x7,x6,x5,x4,x3,x2,x1,x0)
begin
return x7,x6,x5,x4,x3,x2,x1,x0,0;
end

bool isGT(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
if (left8 != right8) then
if (left8 = 1) then
return 1;
fi
else 
if (left7 != right7) then
if (left7 = 1) then
return 1;
fi
else 
if (left6 != right6) then
if (left6 = 1) then
return 1;
fi
else 
if (left5 != right5) then
if (left5 = 1) then
return 1;
fi
else 
if (left4 != right4) then
if (left4 = 1) then
return 1;
fi
else 
if (left3 != right3) then
if (left3 = 1) then
return 1;
fi
else 
if (left2 != right2) then
if (left2 = 1) then
return 1;
fi
else 
if (left1 != right1) then
if (left1 = 1) then
return 1;
fi
else 
if (left0 != right0) then
if (left0 = 1) then
return 1;
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
return 0;
end

bool isLT(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
if (left8 != right8) then
if (right8 = 1) then
return 1;
fi
else 
if (left7 != right7) then
if (right7 = 1) then
return 1;
fi
else 
if (left6 != right6) then
if (right6 = 1) then
return 1;
fi
else 
if (left5 != right5) then
if (right5 = 1) then
return 1;
fi
else 
if (left4 != right4) then
if (right4 = 1) then
return 1;
fi
else 
if (left3 != right3) then
if (right3 = 1) then
return 1;
fi
else 
if (left2 != right2) then
if (right2 = 1) then
return 1;
fi
else 
if (left1 != right1) then
if (right1 = 1) then
return 1;
fi
else 
if (left0 != right0) then
if (right0 = 1) then
return 1;
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
return 0;
end

bool isEqual(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
if (left8 = right8 & left7 = right7 & left6 = right6 & left5 = right5 & left4 = right4 & left3 = right3 & left2 = right2 & left1 = right1 & left0 = right0) then
return 1;
else 
return 0;
fi
end

bool isNotEqual(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
if (left8 != right8 | left7 != right7 | left6 != right6 | left5 != right5 | left4 != right4 | left3 != right3 | left2 != right2 | left1 != right1 | left0 != right0) then
return 1;
else 
return 0;
fi
end

bool isGTEQ(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
decl eq, gt;
eq := isEqual (left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0);
gt := isGT (left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0);
return eq | gt;
end

bool isLTEQ(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
decl eq, lt;
eq := isEqual (left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0);
lt := isLT (left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0);
return eq | lt;
end

bool<9> inc(x8,x7,x6,x5,x4,x3,x2,x1,x0)
begin
if (x0 = 0) then
return x8,x7,x6,x5,x4,x3,x2,x1,1;
else 
if (x1 = 0) then
return x8,x7,x6,x5,x4,x3,x2,1,0;
else 
if (x2 = 0) then
return x8,x7,x6,x5,x4,x3,1,0,0;
else 
if (x3 = 0) then
return x8,x7,x6,x5,x4,1,0,0,0;
else 
if (x4 = 0) then
return x8,x7,x6,x5,1,0,0,0,0;
else 
if (x5 = 0) then
return x8,x7,x6,1,0,0,0,0,0;
else 
if (x6 = 0) then
return x8,x7,1,0,0,0,0,0,0;
else 
if (x7 = 0) then
return x8,1,0,0,0,0,0,0,0;
else 
return 1,0,0,0,0,0,0,0,0;
fi
fi
fi
fi
fi
fi
fi
fi
end

bool<9> dec(x8,x7,x6,x5,x4,x3,x2,x1,x0)
begin
if (x0 = 1) then
return x8,x7,x6,x5,x4,x3,x2,x1,0;
else 
if (x1 = 1) then
return x8,x7,x6,x5,x4,x3,x2,0,1;
else 
if (x2 = 1) then
return x8,x7,x6,x5,x4,x3,0,1,1;
else 
if (x3 = 1) then
return x8,x7,x6,x5,x4,0,1,1,1;
else 
if (x4 = 1) then
return x8,x7,x6,x5,0,1,1,1,1;
else 
if (x5 = 1) then
return x8,x7,x6,0,1,1,1,1,1;
else 
if (x6 = 1) then
return x8,x7,0,1,1,1,1,1,1;
else 
if (x7 = 1) then
return x8,0,1,1,1,1,1,1,1;
else 
return 0,1,1,1,1,1,1,1,1;
fi
fi
fi
fi
fi
fi
fi
fi
end

bool<9> plus(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
while (returnTemp) do
left8,left7,left6,left5,left4,left3,left2,left1,left0 := inc (left8,left7,left6,left5,left4,left3,left2,left1,left0);
right8,right7,right6,right5,right4,right3,right2,right1,right0 := dec (right8,right7,right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
od
return left8,left7,left6,left5,left4,left3,left2,left1,left0;
end

bool<9> minus(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
right8,right7,right6,right5,right4,right3,right2,right1,right0 := oneComplement (right8,right7,right6,right5,right4,right3,right2,right1,right0);
left8,left7,left6,left5,left4,left3,left2,left1,left0 := plus (left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0);
left8,left7,left6,left5,left4,left3,left2,left1,left0 := plus (left8,left7,left6,left5,left4,left3,left2,left1,left0,0,0,0,0,0,0,0,0,1);
return 0,    left7,left6,left5,left4,left3,left2,left1,left0;
end

bool<9> lShift(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
while (returnTemp) do
left8,left7,left6,left5,left4,left3,left2,left1,left0 := lShiftOne (left8,left7,left6,left5,left4,left3,left2,left1,left0);
right8,right7,right6,right5,right4,right3,right2,right1,right0 := dec (right8,right7,right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
od
return left8,left7,left6,left5,left4,left3,left2,left1,left0;
end

bool<9> rShift(left8,left7,left6,left5,left4,left3,left2,left1,left0,right8,right7,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
while (returnTemp) do
left8,left7,left6,left5,left4,left3,left2,left1,left0 := rShiftOne (left8,left7,left6,left5,left4,left3,left2,left1,left0);
right8,right7,right6,right5,right4,right3,right2,right1,right0 := dec (right8,right7,right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right8,right7,right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0,0,0);
od
return left8,left7,left6,left5,left4,left3,left2,left1,left0;
end

void main()
begin
decl returnTemp;
decl S8,S7,S6,S5,S4,S3,S2,S1,S0;
decl O8,O7,O6,O5,O4,O3,O2,O1,O0;
decl SMax8,SMax7,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0;
decl OMax8,OMax7,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0;
decl STemp8,STemp7,STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0;
decl OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0;
decl OCounter8,OCounter7,OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0;
returnTemp := 0;
S8,S7,S6,S5,S4,S3,S2,S1,S0 := 0,0,0,0,0,0,0,0,0;
O8,O7,O6,O5,O4,O3,O2,O1,O0 := 0,0,0,0,0,0,0,0,0;
SMax8,SMax7,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0 := 1,0,0,0,0,0,0,0,0;
OMax8,OMax7,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0 := 1,0,0,0,0,0,0,0,0;
STemp8,STemp7,STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0 := 0,0,0,0,0,0,0,0,0;
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0,0,0;
OCounter8,OCounter7,OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0 := 0,0,0,0,0,0,0,0,0;
returnTemp := isNotEqual(O8,O7,O6,O5,O4,O3,O2,O1,O0,OMax8,OMax7,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0);
while (returnTemp) do
S8,S7,S6,S5,S4,S3,S2,S1,S0 := 0,0,0,0,0,0,0,0,0;
returnTemp := isNotEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,SMax8,SMax7,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0);
while (returnTemp) do
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,0,0,0);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0,0,0;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,0,0,1);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0,0,1;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,0,1,0);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0,1,0;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,0,1,1);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0,1,1;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,1,0,0);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,1,0,0;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,1,0,1);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,1,0,1;
else 
returnTemp := isEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,1,1,0);
if (returnTemp) then
OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,1,1,0;
fi
fi
fi
fi
fi
fi
fi
returnTemp := isEqual(O8,O7,O6,O5,O4,O3,O2,O1,O0,OTemp8,OTemp7,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0);
if (returnTemp) then
OCounter8,OCounter7,OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0 := plus(OCounter8,OCounter7,OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0,0,0,0,0,0,0,0,0,1);
goto break;
fi
S8,S7,S6,S5,S4,S3,S2,S1,S0 := plus(S8,S7,S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,0,0,1);
returnTemp := isNotEqual(S8,S7,S6,S5,S4,S3,S2,S1,S0,SMax8,SMax7,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0);
od
break: O8,O7,O6,O5,O4,O3,O2,O1,O0 := plus(O8,O7,O6,O5,O4,O3,O2,O1,O0,0,0,0,0,0,0,0,0,1);
returnTemp := isNotEqual(O8,O7,O6,O5,O4,O3,O2,O1,O0,OMax8,OMax7,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0);
od
returnTemp := isEqual(OCounter8,OCounter7,OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0,0,0,0,0,0,0,1,1,1);
if (returnTemp) then
reach: isGT(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
fi
end
