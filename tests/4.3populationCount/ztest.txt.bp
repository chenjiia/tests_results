
bool<7> and(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
return left6&right6,left5&right5,left4&right4,left3&right3,left2&right2,left1&right1,left0&right0;
end

bool<7> or(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
return left6|right6,left5|right5,left4|right4,left3|right3,left2|right2,left1|right1,left0|right0;
end

bool<7> oneComplement(x6,x5,x4,x3,x2,x1,x0)
begin
return 0,~x5,~x4,~x3,~x2,~x1,~x0;
end

bool<7> xor(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
return left6^right6,left5^right5,left4^right4,left3^right3,left2^right2,left1^right1,left0^right0;
end

bool<7> rShiftOne(x6,x5,x4,x3,x2,x1,x0)
begin
return 0,x6,x5,x4,x3,x2,x1;
end

bool<7> lShiftOne(x6,x5,x4,x3,x2,x1,x0)
begin
return x5,x4,x3,x2,x1,x0,0;
end

bool isGT(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
if (left6 != right6) then
if (left6 = 1) then
return 1;
fi
else 
if (left5 != right5) then
if (left5 = 1) then
return 1;
fi
else 
if (left4 != right4) then
if (left4 = 1) then
return 1;
fi
else 
if (left3 != right3) then
if (left3 = 1) then
return 1;
fi
else 
if (left2 != right2) then
if (left2 = 1) then
return 1;
fi
else 
if (left1 != right1) then
if (left1 = 1) then
return 1;
fi
else 
if (left0 != right0) then
if (left0 = 1) then
return 1;
fi
fi
fi
fi
fi
fi
fi
fi
return 0;
end

bool isLT(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
if (left6 != right6) then
if (right6 = 1) then
return 1;
fi
else 
if (left5 != right5) then
if (right5 = 1) then
return 1;
fi
else 
if (left4 != right4) then
if (right4 = 1) then
return 1;
fi
else 
if (left3 != right3) then
if (right3 = 1) then
return 1;
fi
else 
if (left2 != right2) then
if (right2 = 1) then
return 1;
fi
else 
if (left1 != right1) then
if (right1 = 1) then
return 1;
fi
else 
if (left0 != right0) then
if (right0 = 1) then
return 1;
fi
fi
fi
fi
fi
fi
fi
fi
return 0;
end

bool isEqual(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
if (left6 = right6 & left5 = right5 & left4 = right4 & left3 = right3 & left2 = right2 & left1 = right1 & left0 = right0) then
return 1;
else 
return 0;
fi
end

bool isNotEqual(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
if (left6 != right6 | left5 != right5 | left4 != right4 | left3 != right3 | left2 != right2 | left1 != right1 | left0 != right0) then
return 1;
else 
return 0;
fi
end

bool isGTEQ(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
decl eq, gt;
eq := isEqual (left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0);
gt := isGT (left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0);
return eq | gt;
end

bool isLTEQ(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
decl eq, lt;
eq := isEqual (left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0);
lt := isLT (left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0);
return eq | lt;
end

bool<7> inc(x6,x5,x4,x3,x2,x1,x0)
begin
if (x0 = 0) then
return x6,x5,x4,x3,x2,x1,1;
else 
if (x1 = 0) then
return x6,x5,x4,x3,x2,1,0;
else 
if (x2 = 0) then
return x6,x5,x4,x3,1,0,0;
else 
if (x3 = 0) then
return x6,x5,x4,1,0,0,0;
else 
if (x4 = 0) then
return x6,x5,1,0,0,0,0;
else 
if (x5 = 0) then
return x6,1,0,0,0,0,0;
else 
return 1,0,0,0,0,0,0;
fi
fi
fi
fi
fi
fi
end

bool<7> dec(x6,x5,x4,x3,x2,x1,x0)
begin
if (x0 = 1) then
return x6,x5,x4,x3,x2,x1,0;
else 
if (x1 = 1) then
return x6,x5,x4,x3,x2,0,1;
else 
if (x2 = 1) then
return x6,x5,x4,x3,0,1,1;
else 
if (x3 = 1) then
return x6,x5,x4,0,1,1,1;
else 
if (x4 = 1) then
return x6,x5,0,1,1,1,1;
else 
if (x5 = 1) then
return x6,0,1,1,1,1,1;
else 
return 0,1,1,1,1,1,1;
fi
fi
fi
fi
fi
fi
end

bool<7> plus(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
while (returnTemp) do
left6,left5,left4,left3,left2,left1,left0 := inc (left6,left5,left4,left3,left2,left1,left0);
right6,right5,right4,right3,right2,right1,right0 := dec (right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
od
return left6,left5,left4,left3,left2,left1,left0;
end

bool<7> minus(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
right6,right5,right4,right3,right2,right1,right0 := oneComplement (right6,right5,right4,right3,right2,right1,right0);
left6,left5,left4,left3,left2,left1,left0 := plus (left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0);
left6,left5,left4,left3,left2,left1,left0 := plus (left6,left5,left4,left3,left2,left1,left0,0,0,0,0,0,0,1);
return 0,    left5,left4,left3,left2,left1,left0;
end

bool<7> lShift(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
while (returnTemp) do
left6,left5,left4,left3,left2,left1,left0 := lShiftOne (left6,left5,left4,left3,left2,left1,left0);
right6,right5,right4,right3,right2,right1,right0 := dec (right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
od
return left6,left5,left4,left3,left2,left1,left0;
end

bool<7> rShift(left6,left5,left4,left3,left2,left1,left0,right6,right5,right4,right3,right2,right1,right0)
begin
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
while (returnTemp) do
left6,left5,left4,left3,left2,left1,left0 := rShiftOne (left6,left5,left4,left3,left2,left1,left0);
right6,right5,right4,right3,right2,right1,right0 := dec (right6,right5,right4,right3,right2,right1,right0);
returnTemp := isNotEqual (right6,right5,right4,right3,right2,right1,right0,0,0,0,0,0,0,0);
od
return left6,left5,left4,left3,left2,left1,left0;
end

void main()
begin
decl returnTemp;
decl S6,S5,S4,S3,S2,S1,S0;
decl O6,O5,O4,O3,O2,O1,O0;
decl SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0;
decl OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0;
decl STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0;
decl OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0;
decl OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0;
decl temp16,temp15,temp14,temp13,temp12,temp11,temp10;
decl temp26,temp25,temp24,temp23,temp22,temp21,temp20;
returnTemp := 0;
S6,S5,S4,S3,S2,S1,S0 := 0,0,0,0,0,0,0;
O6,O5,O4,O3,O2,O1,O0 := 0,0,0,0,0,0,0;
SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0 := 0,0,0,0,0,0,0;
OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0 := 0,0,0,0,0,0,0;
STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0 := 0,0,0,0,0,0,0;
OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0;
OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0 := 0,0,0,0,0,0,0;
temp16,temp15,temp14,temp13,temp12,temp11,temp10 := 0,0,0,0,0,0,0;
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := 0,0,0,0,0,0,0;
returnTemp := isNotEqual(O6,O5,O4,O3,O2,O1,O0,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0);
while (returnTemp) do
S6,S5,S4,S3,S2,S1,S0 := 0,0,0,0,0,0,0;
returnTemp := isNotEqual(S6,S5,S4,S3,S2,S1,S0,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0);
while (returnTemp) do
OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := 0,0,0,0,0,0,0;
STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0 := S6,S5,S4,S3,S2,S1,S0;
temp16,temp15,temp14,temp13,temp12,temp11,temp10 := and(STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0,1,0,1,0,1,0,1);
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := rShift(STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0,0,0,0,0,0,0,1);
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := and(temp26,temp25,temp24,temp23,temp22,temp21,temp20,1,0,1,0,1,0,1);
STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0 := plus(temp16,temp15,temp14,temp13,temp12,temp11,temp10,temp26,temp25,temp24,temp23,temp22,temp21,temp20);
temp16,temp15,temp14,temp13,temp12,temp11,temp10 := and(STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0,0,1,1,0,0,1,1);
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := rShift(STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0,0,0,0,0,0,1,0);
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := and(temp26,temp25,temp24,temp23,temp22,temp21,temp20,0,1,1,0,0,1,1);
STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0 := plus(temp16,temp15,temp14,temp13,temp12,temp11,temp10,temp26,temp25,temp24,temp23,temp22,temp21,temp20);
temp16,temp15,temp14,temp13,temp12,temp11,temp10 := STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0;
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := rShift(STemp6,STemp5,STemp4,STemp3,STemp2,STemp1,STemp0,0,0,0,0,1,0,0);
temp26,temp25,temp24,temp23,temp22,temp21,temp20 := plus(temp16,temp15,temp14,temp13,temp12,temp11,temp10,temp26,temp25,temp24,temp23,temp22,temp21,temp20);
OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0 := and(temp26,temp25,temp24,temp23,temp22,temp21,temp20,0,0,0,1,1,1,1);
returnTemp := isEqual(O6,O5,O4,O3,O2,O1,O0,OTemp6,OTemp5,OTemp4,OTemp3,OTemp2,OTemp1,OTemp0);
if (returnTemp) then
OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0 := plus(OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0,0,0,0,0,0,0,1);
goto break;
fi
S6,S5,S4,S3,S2,S1,S0 := plus(S6,S5,S4,S3,S2,S1,S0,0,0,0,0,0,0,1);
returnTemp := isNotEqual(S6,S5,S4,S3,S2,S1,S0,SMax6,SMax5,SMax4,SMax3,SMax2,SMax1,SMax0);
od
break: O6,O5,O4,O3,O2,O1,O0 := plus(O6,O5,O4,O3,O2,O1,O0,0,0,0,0,0,0,1);
returnTemp := isNotEqual(O6,O5,O4,O3,O2,O1,O0,OMax6,OMax5,OMax4,OMax3,OMax2,OMax1,OMax0);
od
returnTemp := isEqual(OCounter6,OCounter5,OCounter4,OCounter3,OCounter2,OCounter1,OCounter0,0,0,0,1,0,0,1);
if (returnTemp) then
reach: isGT(0,0,0,0,0,0,0,0,0,0,0,0,0,1);
fi
end
